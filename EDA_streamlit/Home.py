import streamlit as st
import leafmap.foliumap as leafmap
import pandas as pd
import folium
import matplotlib.pyplot as plt
import streamlit as st
import pandas as pd
import seaborn as sns
from PIL import Image

def main():

    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")


    pages = {
        "üìä EDA": eda_page,
        "üñºÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤–∏–¥–µ–æ": graphics_page,
        "üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏": metrics_page,
        "üó∫Ô∏è –ö–∞—Ä—Ç—ã": maps_page,
        "üë• –ü–æ–∏—Å–∫ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": multi_user_page
    }


    selection = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", list(pages.keys()))


    page = pages[selection]
    page()






def eda_page():
    
    st.title("EDA")
    st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–∏—Å–∞–Ω—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    watchtime_age = pd.read_csv('csv_data\watchtime_age.csv')

    mean_age = pd.read_csv('csv_data\mean_age.csv')

    median_percent_df = pd.read_csv('csv_data\median_percent_watched_category.csv')

    time_of_day_counts = pd.read_csv('csv_data\ime_of_day_counts.csv')

    merged_df = pd.read_csv('csv_data\merged_df.csv')



    def display_data():
        age_class_counts = merged_df['age_class'].value_counts().reset_index()
        age_class_counts.columns = ['age_class', 'count']


        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–ª–∞—Å—Å–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞')
        sns.barplot(x='age_class', y='count', data=age_class_counts, palette='pastel')
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.xlabel("–ö–ª–∞—Å—Å –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        st.pyplot(plt)


        sex_counts = merged_df['sex'].value_counts()

        # Create the pie chart
        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É')
        plt.pie(sex_counts, labels=sex_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É")
        plt.axis('equal')  


        st.pyplot(plt)


        st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ target –∫–ª–∞—Å—Å–æ–≤ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å downsampling –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ train.')

        

        st.subheader('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞')
        plt.figure(figsize=(10, 6))
        sns.barplot(x='age', y='average_watchtime', data=watchtime_age, palette='pastel')
        plt.title("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.xlabel("–í–æ–∑—Ä–∞—Å—Ç")
        plt.ylabel("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        st.pyplot(plt)
        st.write('C—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 11-15 –ª–µ—Ç, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑—Ä–∞—Å—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ª–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ 2000 —Å–µ–∫—É–Ω–¥.')
      
        #–∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ä–∞–Ω–µ–µ 



        # –ø–æ –∫–ª–∞—Å—Å–∞–º 1-5 —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rutube

        # –∂–µ–Ω—â–∏–Ω—ã —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rutube 

        
        # –ø–æ –∫–ª–∞—Å—Å–∞–º 1-5 –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ 

        # –º—É–∂—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ 
        




        plt.figure(figsize=(10, 6))
        st.subheader('–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        sns.barplot(x='category', y='median_percent_watched', data=median_percent_df, palette='pastel')
        
        plt.xticks(rotation=45, ha='right')

        plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ —Å—Ä–µ–¥–Ω–µ')
        plt.title('–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        
        st.pyplot(plt)

        st.write('–í —Å—Ä–µ–¥–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–∞—Ä–∏–≤–∞—é—Ç 8 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ, –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–º–æ—Ç—Ä—è—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –°–ø–æ—Ä—Ç –∏ –Æ–º–æ—Ä')

        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫')
        sns.barplot(x='time_of_day', y='count', data=time_of_day_counts, palette='pastel')
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        plt.xlabel("–í—Ä–µ–º—è —Å—É—Ç–æ–∫")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ")
        st.pyplot(plt)

        st.write('–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–µ—á–µ—Ä–æ–º –¥–Ω–µ–º –∏ —É—Ç—Ä–æ–º, –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∫–ª–∞—Å—Å —ç—Ç–æ –Ω–æ—á—å.')


        


        


    if __name__ == '__main__':
        display_data()









#C–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ñ–∏—á–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∏–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ 



def metrics_page():
    st.title("–ú–µ—Ç—Ä–∏–∫–∏")
    st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    
    st.subheader("–ü–∞–π–ø–ª–∞–π–Ω –º–æ–¥–µ–ª–∏")
    image1 = Image.open('pipeline.png')
    st.image(image1, caption='–ü–∞–π–ø–ª–∞–π–Ω –º–æ–¥–µ–ª–∏', use_column_width=True)

    data_metrics = {
    'model': ['baseline', 'CoLES', 'aggregate', 'CoLES + aggregate'],
    'score_weighted': [0.4463, 0.5143, 0.5352, 0.5389],
    }


    st.subheader("–ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫")
    metrics = pd.DataFrame(data_metrics)
    st.dataframe(metrics)

    st.write("–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ score_weighted –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:")
    st.latex(r'''Score = F_{\text{weighted}}/n''')
        

    x_values = [1, 2, 5, 10, 15]
    y_values = [0.4463, 0.2268, 0.09452, 0.04817, 0.03344]

    
    st.subheader("–ì—Ä–∞—Ñ–∏–∫")
    plt.figure(figsize=(10, 6))
    plt.plot(x_values, y_values, marker='o', linestyle='-', color='b')
 


    plt.title("Score –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞—á–∏–Ω–∞—è —Å –∫–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    plt.ylabel("Score")
    st.pyplot(plt)


    st.write('–ü–æ –≥—Ä–∞—Ñ–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª–æ –ª–æ–∫—Ç—è, –æ–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  ‚Äî 5')


    st.subheader("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏")

    st.write('–ú–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω–µ—Å–µ –≤ —Å—É–º–º–µ —Ä–∞–±–æ—Ç–∞—é—Ç 25 –º–∏–Ω—É—Ç')

    
def graphics_page():
    df_keywords = pd.read_csv('csv_data\keywords.csv')
    df_keywords_2 = df_keywords.head(20)
    st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ")

    st.subheader("–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ")
    image = Image.open('cloud_of_words.png')
    st.image(image, caption='–û–±–ª–∞–∫–æ —Å–ª–æ–≤', use_column_width=True)
    st.write('–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ. –°–∞–º—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ —ç—Ç–æ –°–ï–†–ò–Ø, –í–´–ü–£–°–ö, –ú–£–ñ–°–ö–û–ï, –ñ–ï–ù–°–ö–û–ï, –°–ï–ó–û–ù ')


    plt.figure(figsize=(10, 6))
    st.subheader('–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏')
    sns.barplot(x='id', y='age', data=df_keywords_2, palette='pastel')
    
    plt.xticks(rotation=45, ha='right')

    plt.xlabel('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ')
    plt.ylabel('–í–æ–∑—Ä–∞—Å—Ç')
    plt.title('–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏')

    st.write('–í —Å—Ä–µ–¥–Ω–µ–º —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤, –≤ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 26 –¥–æ 35 ')
        
    st.pyplot(plt)
    











def maps_page():

    st.title("–ö–∞—Ä—Ç—ã")



    try:
        result_df = pd.read_csv('csv_data\category_result.csv', encoding='utf-8')
    except UnicodeDecodeError:
        st.error("Error loading the file. Try using a different encoding like 'latin1'.")
        result_df = pd.read_csv('csv_data\category_result.csv', encoding='latin1')


    category_mapping = {
        '–Æ–º–æ—Ä': 'Humor',
        '–û–±—É—á–µ–Ω–∏–µ': 'Education',
        '–ò–Ω—Ç–µ—Ä–≤—å—é': 'Interview',
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'Entertainment',
        '–ê–Ω–∏–º–µ': 'Anime',
        '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã': 'Cartoons',
        '–í–∏–¥–µ–æ–∏–≥—Ä—ã': 'Video Games',
        '–î–µ—Ç—è–º': 'For Kids',
        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç': 'Construction and Repair',
        '–ù–∞—É–∫–∞': 'Science',
        '–ú—É–∑—ã–∫–∞': 'Music'
    }
    result_df['category'] = result_df['category'].replace(category_mapping)


    color_mapping = {
        'Humor': 'blue',
        'Education': 'green',
        'Interview': 'red',
        'Entertainment': 'purple',
        'Anime': 'orange',
        'Cartoons': 'pink',
        'Video Games': 'yellow',
        'For Kids': 'cyan',
        'Construction and Repair': 'brown',
        'Science': 'lightgreen',
        'Music': 'magenta'
    }




    selected_category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", ['All'] + list(result_df['category'].unique()))
 

    filtered_df = result_df.copy()
    if selected_category != 'All':
        filtered_df = filtered_df[filtered_df['category'] == selected_category]


    st.subheader("C–∞–º—ã–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö")

    if not filtered_df.empty:
        m = leafmap.Map(center=[filtered_df['latitude'].mean(), filtered_df['longitude'].mean()], zoom=4)
    else:
        m = leafmap.Map(center=[55.7558, 37.6176], zoom=4)  

    
    filtered_df['color'] = filtered_df['category'].map(color_mapping)


    for _, row in filtered_df.iterrows():
        popup = f"{row['region']}<br>Category: {row['category']}<br>Videos: {row['max_count']}"
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=popup,
            icon=folium.Icon(color=row['color'])
        ).add_to(m)


    m.to_streamlit(height=700)














def multi_user_page():
    st.title("–ü–æ–∏—Å–∫ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    st.write("–í –ø—Ä–æ—Ü–µ—Å—Å–µ EDA –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –º–Ω–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç. –ù–æ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –¥–∞–Ω–Ω—ã–µ, –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–ª–≥–∞–ª–∏ –æ —Å–≤–æ–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ç–∞–∫–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ '–º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' - —ç—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ–∫")

    st.write("–ú—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤—ã–∏—Å–∫–∏–≤–∞–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°—É—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–≤–∞–Ω—Ç–∏–ª–µ–π —Ä–æ–ª–∏–∫–æ–≤ –Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–ª–æ–¥–æ–π –∑—Ä–∏—Ç–µ–ª—å, –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É 10-—ã–º –∫–≤–∞–Ω—Ç–∏–ª–µ–º –∏ 90-—ã–º –∫–≤–∞–Ω—Ç–∏–ª–µ–º –Ω–∞–∏–±–æ–ª—å—à–∞—è. –î–∞–ª–µ–µ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä—ã." )
    
    st.write("–ù–∞ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ —Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º, –∞ –æ—Ç–µ—Ü –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–º" )

    st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    image1 = Image.open('paxan.png')
    st.image(image1, caption='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∑—Ä–æ—Å–ª–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', use_column_width=True)
    image2 = Image.open('roblox.png')
    st.image(image2, caption='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ä–µ–±–µ–Ω–∫–∞', use_column_width=True)

    st.write("–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Ü–æ–º –∏ —Ä–µ–±–µ–Ω–∫–æ–º.")

   
    

    


if __name__ == "__main__":
    main()