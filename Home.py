import streamlit as st
import leafmap.foliumap as leafmap
import pandas as pd
import folium
import matplotlib.pyplot as plt
import streamlit as st
import pandas as pd
import seaborn as sns
from PIL import Image

def main():

    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")


    pages = {
        "üìä EDA": eda_page,
        "üñºÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤–∏–¥–µ–æ": graphics_page,
        "üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏": metrics_page,
        "üó∫Ô∏è –ö–∞—Ä—Ç—ã": maps_page,
        "üë• –ü–æ–∏—Å–∫ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": multi_user_page
    }


    selection = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", list(pages.keys()))


    page = pages[selection]
    page()






def eda_page():
    
    st.title("EDA")
    st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–∏—Å–∞–Ω—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    watchtime_age = pd.read_csv('csv_data/watchtime_age.csv')

    mean_age = pd.read_csv('csv_data/mean_age.csv')

    median_percent_df = pd.read_csv('csv_data/median_percent_watched_category.csv')

    time_of_day_counts = pd.read_csv('csv_data/ime_of_day_counts.csv')

    merged_df = pd.read_csv('csv_data/merged_df.csv')




    # Streamlit app to display DataFrames and WordCloud
    def display_data():
        age_class_counts = merged_df['age_class'].value_counts().reset_index()
        age_class_counts.columns = ['age_class', 'count']


        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–ª–∞—Å—Å–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞')
        sns.barplot(x='age_class', y='count', data=age_class_counts, palette='pastel')
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.xlabel("–ö–ª–∞—Å—Å –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        st.pyplot(plt)


        sex_counts = merged_df['sex'].value_counts()

        # Create the pie chart
        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É')
        plt.pie(sex_counts, labels=sex_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É")
        plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

        # Display the plot in Streamlit
        st.pyplot(plt)

        # Additional information
        st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ target –∫–ª–∞—Å—Å–æ–≤ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å downsampling –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ train.')

        

        st.subheader('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞')
        plt.figure(figsize=(10, 6))
        sns.barplot(x='age', y='average_watchtime', data=watchtime_age, palette='pastel')
        plt.title("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞")
        plt.xlabel("–í–æ–∑—Ä–∞—Å—Ç")
        plt.ylabel("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        st.pyplot(plt)
        st.write('C—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 11-15 –ª–µ—Ç, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑—Ä–∞—Å—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15 –ª–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ 2000 —Å–µ–∫—É–Ω–¥.')
      
        #–∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ä–∞–Ω–µ–µ 



        # –ø–æ –∫–ª–∞—Å—Å–∞–º 1-5 —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rutube

        # –∂–µ–Ω—â–∏–Ω—ã —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rutube 

        
        # –ø–æ –∫–ª–∞—Å—Å–∞–º 1-5 –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ 

        # –º—É–∂—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ 
        




        plt.figure(figsize=(10, 6))
        st.subheader('–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        sns.barplot(x='category', y='median_percent_watched', data=median_percent_df, palette='pastel')

        plt.xticks(rotation=45, ha='right')

        plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ —Å—Ä–µ–¥–Ω–µ')
        plt.title('–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        st.pyplot(plt)



        plt.figure(figsize=(10, 6))
        st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫')
        sns.barplot(x='time_of_day', y='count', data=time_of_day_counts, palette='pastel')
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
        plt.xlabel("–í—Ä–µ–º—è —Å—É—Ç–æ–∫")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ")
        st.pyplot(plt)


        


        


    if __name__ == '__main__':
        display_data()















def metrics_page():
    st.title("Metrics")
    st.write("This page shows different metrics and key performance indicators.")


        











def graphics_page():
    st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ")
    st.write("Visualize your data with different types of graphs and charts.")
    # Display Word Cloud
    st.subheader("–û–±–ª–∞–∫–æ —Å–ª–æ–≤")
    image = Image.open('cloud_of_words.png')
    st.image(image, caption='Sample Image', use_column_width=True)













def maps_page():

    st.title("–ö–∞—Ä—Ç—ã")

# Read the CSVimport leafmap.foliumap as leafmap

    try:
        result_df = pd.read_csv('csv_data/category_result.csv', encoding='utf-8')
    except UnicodeDecodeError:
        st.error("Error loading the file. Try using a different encoding like 'latin1'.")
        result_df = pd.read_csv('csv_data/category_result.csv', encoding='latin1')


    # Replace the category names in the DataFrame with the English version
    category_mapping = {
        '–Æ–º–æ—Ä': 'Humor',
        '–û–±—É—á–µ–Ω–∏–µ': 'Education',
        '–ò–Ω—Ç–µ—Ä–≤—å—é': 'Interview',
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'Entertainment',
        '–ê–Ω–∏–º–µ': 'Anime',
        '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã': 'Cartoons',
        '–í–∏–¥–µ–æ–∏–≥—Ä—ã': 'Video Games',
        '–î–µ—Ç—è–º': 'For Kids',
        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç': 'Construction and Repair',
        '–ù–∞—É–∫–∞': 'Science',
        '–ú—É–∑—ã–∫–∞': 'Music'
    }
    result_df['category'] = result_df['category'].replace(category_mapping)

    # Color mapping for each category
    color_mapping = {
        'Humor': 'blue',
        'Education': 'green',
        'Interview': 'red',
        'Entertainment': 'purple',
        'Anime': 'orange',
        'Cartoons': 'pink',
        'Video Games': 'yellow',
        'For Kids': 'cyan',
        'Construction and Repair': 'brown',
        'Science': 'lightgreen',
        'Music': 'magenta'
    }



    # Filters at the bottom for Category and Region
    selected_category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", ['All'] + list(result_df['category'].unique()))
 

    # Filter the DataFrame based on the selected Category and Region
    filtered_df = result_df.copy()
    if selected_category != 'All':
        filtered_df = filtered_df[filtered_df['category'] == selected_category]

    # Set up the map
    st.subheader("C–∞–º—ã–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö")

    # Create a map centered on one of the coordinates (adjust as needed)
    if not filtered_df.empty:
        m = leafmap.Map(center=[filtered_df['latitude'].mean(), filtered_df['longitude'].mean()], zoom=4)
    else:
        m = leafmap.Map(center=[55.7558, 37.6176], zoom=4)  # Default center if no data

    # Add points from the filtered_df DataFrame to the map with different colors for each category
    filtered_df['color'] = filtered_df['category'].map(color_mapping)

    # Add the points from DataFrame with custom colors
    for _, row in filtered_df.iterrows():
        popup = f"{row['region']}<br>Category: {row['category']}<br>Videos: {row['max_count']}"
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=popup,
            icon=folium.Icon(color=row['color'])
        ).add_to(m)

    # Display the map in Streamlit
    m.to_streamlit(height=700)














def multi_user_page():
    st.title("–ü–æ–∏—Å–∫ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    st.write("–í –ø—Ä–æ—Ü–µ—Å—Å–µ EDA –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏. –ë—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏.")
    
    st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    image1 = Image.open('paxan.png')
    st.image(image1, caption='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∑—Ä–æ—Å–ª–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', use_column_width=True)
    image2 = Image.open('roblox.png')
    st.image(image2, caption='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ä–µ–±–µ–Ω–∫–∞', use_column_width=True)

    st.write("–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Ü–æ–º –∏ —Ä–µ–±–µ–Ω–∫–æ–º.")
    s
    

    


if __name__ == "__main__":
    main()